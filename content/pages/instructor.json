{
  "title": "Attention: Instructor",
  "path": "/instructor",
  "displayTitle": true,
  "content": "## root",
  "hero": {
    "headline": "Dummy",
    "textline": "Dummy",
    "large": false,
    "overlay": true,
    "image": "../images/LPC2.jpg",
    "ctas": [
      {
        "label": "Read The Blog",
        "link": "/blog",
        "primary": true,
        "arrow": true
      }
    ]
  },
  "blocks": [
    {
      "_template": "ContentBlock",
      "content": "## Attention: Instructor\n\nThis page is intended to serve as an introduction to how to access the features of the site both publically viewable as well as those that would be hidden from users if this mock up were real. It should also help explain to you various aspects of the site and why the choices were made the way they were leading to the site before you now. \n\n In order to appreicate these two aspects of the site, you will need to run the development server, all of which is automated except for the need to have Node.js installed locally, as it will accomplish the development server set up based on the package.json. You also can see the development side of it on CodeSandbox. For the public facing side see the hosted site, which is located at <a href='https://g5-blog-cclife.netlify.app'>g5-blog-netlify.app</a>, which is hopefully how you found yourself reading this but if not it is presented again for your convenience. \n\n"
    },
    {
      "_template": "ContentBlock",
      "content": "### Development Server // CMS \n\n The **Content Management System** that is being utilized by this site is not so much a full page as it is a sidebar available to the user on the development side. For the sake of completing the assignment, we opted not to configure a separate URL to host the development server to edit the content, which would have required several additional authenication hoops and for a blog utilizing this CMS, it seems this method is the only viable option other than what they style Open Authoring, which would enable anyone to edit content and submit it as a pull request to the repository hosting the site, which at present only seems to work with a different static site generator, **Next.js**. \n\n Content Management Systems enable the parties with access to the CMS panel the ability to edit the content of a website, which is how most blog writers interact with their sites exclusively. \n\n #### Set Up \n\n To experiment with and test our content management panel, Simply run `npm i -g yarn` then  `yarn && yarn develop` then navigate to port that is linked in the terminal. In your browser the site will render and in the bottom left hand corner there will be a pen icon on a tab the same color as the accents through the site. This is the CMS panel!  It allows you to modify the site content, rearrange it, add or remove content and create all new content right there. \n\n This cool headless CMS panel is from the external library known as TinaCMS, a relatively new project that is very exciting as it requires none of the overhead or expense of other CMS systems, while also lacking the security implications of Wordpress. \n\n The coolest feature is in the top lefthand corner, where you can open an additional menu that enables page modification, theme modification (which is why styled components ended up being the CSS variant employed here), menu style modifications and changes to the site metadata. While not separately hosted at Netlify (who while able to host it, would have meant additional complexitites exceeding the boundaries of reason for this project we felt), the power of this system even to introduce developer's who are writing blog posts to some of these technologies as they pull in the repo and use the cms system to write their own blogs after first getting the dev server up is a powerful way to engender the technical skills that are quickly becoming unavoidable for the entire workforce. For better or for worse, it also will probably require generalized Javascript knowledge as it seems that JS is here to stay.",
      "name": "cms",
      "title": "Development Server // CMS",
      "center": false,
      "underline": true,
      "recipient": "dummy",
      "image": "../images/dummy.jpg",
      "fields": [
        {
          "_template": "dummy",
          "label": "dummy",
          "inputType": "dummy",
          "autocomplete": "dummy"
        }
      ]
    },
    {
      "_template": "ContentBlock",
      "content": "### Public Facing Site \n\n The site's content reflects that of a typical blog written with almost any CMS and is very snappy in its rendering on Netlify's server due to the static site generator caching the results of the build which it then rapidly shoots over to browsers requesting the files. The entirity of the CSS and HTML of this particular site was derived from JS files, through the process of transpiling orchestrated by the SSR, which is Gatsby.js. What makes this particular site interesting is that it also has some level of isomorphic rendering inherent in its configuration, meaning that there is still some level of rendering being done on the server side using technologies that are generally thought of as client side exclusive, Javascript and the library thereof called React which the overwhelming majority of this site is technically written in. Specifically this site is written in React that is embedded is ES7 Javascript, the newest Javascript and thanks to Gatsby it runs on the oldest supported browsers and does so quickly! \n\n One feature of this interface that was particularly troubling is the icon in the top left hand corner, within the Navbar, which if clicked will toggle between light and dark modes. This and the menu's capacity to modify site behavior is due to the use of Styled Components, which is a way of including CSS in React, which already contains a variant of XHTML written within the Javascript called JSX. Styled Components enables one to write inline stylesheets, which are all the rage with Atomic Design being the new favorite design pattern, to be injected by Gatsby on each page and specific each component. It is an ugly way to style a website, but due to the order things are rendered at, it enables the easy modification that occurs when you click that button and the other version of the site's pages your browser was served become what's displayed! \n\n Due to its crafting of HTML within the JS, React normally is unfriendly to SEO however one reason we elected to use Gatsby for this site is due to its inclusion of a very handy plugin that is configured in the `src/components/SEO/seo.js` file which is called React Helmet and enables control over the head element in the generated HTML. Using the same settings we have configured for use across the site, we were able to leverage and populated the SEO configuration with them, making for SEO-friendly React ",
      "name": "cms",
      "title": "Development Server // CMS",
      "center": false,
      "underline": true,
      "recipient": "dummy",
      "image": "../images/dummy.jpg",
      "fields": [
        {
          "_template": "dummy",
          "label": "dummy",
          "inputType": "dummy",
          "autocomplete": "dummy"
        }
      ]
    }
  ]
}
